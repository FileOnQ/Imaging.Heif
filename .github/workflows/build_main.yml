name: Build (1.0.0)

on:
   push:
     branches: [ main ]

jobs:
  build:
    runs-on: windows-2019
    outputs:
      package_version: ${{ env.PACKAGE_VERSION }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.302

    - name: Install Build Dependencies
      run: |
        choco install meson
        choco install ninja
        choco install nasm
        echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\Program Files\Meson" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
    - name: Set Version
      run: echo "PACKAGE_VERSION=1.0.0-dev.${{ GITHUB.RUN_NUMBER }}" >> $env:GITHUB_ENV

    - name: Build
      run: dotnet build -c Release
      working-directory: ./src/FileOnQ.Imaging.Heif
      
    - name: Pack
      run: dotnet pack -c Release -o ../../ /p:ContinuousIntegrationBuild=true /p:Version=${{ env.PACKAGE_VERSION }} /p:PackageVersion=${{ env.PACKAGE_VERSION }}
      working-directory: ./src/FileOnQ.Imaging.Heif
      
    - name: Upload NuGet Package
      uses: actions/upload-artifact@v2
      with:
        name: Packages
        path: |
          *.nupkg
          *.snupkg
          
  test-integration:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            architecture: 'AnyCPU'
            framework: 'net48'
          - os: windows-2019
            architecture: 'x86'
            framework: 'net48'
          - os: windows-2019
            architecture: 'x64'
            framework: 'net48'
          - os: windows-2019
            architecture: 'AnyCPU'
            framework: 'net5'
          - os: windows-2019
            architecture: 'x86'
            framework: 'net5'
          - os: windows-2019
            architecture: 'x64'
            framework: 'net5'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Copy Nupkg
        shell: powershell
        run: Copy-Item Packages\* -Destination .

      - name: Update NuGet
        run: dotnet add package FileOnQ.Imaging.Heif --version ${{ needs.build.outputs.package_version }}
        working-directory: ./tests/FileOnQ.Imaging.Heif.Tests.${{ matrix.architecture }}

      - name: Test ${{ matrix.architecture }}
        run: dotnet test -c Release --logger:"console;verbosity=detailed" --filter TestCategory=Integration
        working-directory: ./tests/FileOnQ.Imaging.Heif.Tests.${{ matrix.architecture }}

  test-console-app:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            architecture: 'AnyCPU'
            framework: 'net48'
          - os: windows-2019
            architecture: 'x86'
            framework: 'net48'
          - os: windows-2019
            architecture: 'x64'
            framework: 'net48'
          - os: windows-2019
            architecture: 'AnyCPU'
            framework: 'net5'
          - os: windows-2019
            architecture: 'x86'
            framework: 'net5'
          - os: windows-2019
            architecture: 'x64'
            framework: 'net5'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'true'
          
      - name: Download Artifacts
        uses: actions/download-artifact@v2
      
      - name: Copy Nupkg
        shell: powershell
        run: Copy-Item Packages\* -Destination .
                
      - name: Update NuGet
        run: dotnet add package FileOnQ.Imaging.Heif --version ${{ needs.build.outputs.package_version }}
        working-directory: ./samples/ConsoleApp/ConsoleApp.${{ matrix.framework }}.${{ matrix.architecture }}
        
      - name: Run Console App
        run: dotnet run -c Release
        working-directory: ./samples/ConsoleApp/ConsoleApp.${{ matrix.framework }}.${{ matrix.architecture }}
        
  nuget-publish:
    needs: [test-integration, test-console-app]
    runs-on: windows-2019
    steps:
      - name: Download Packages
        uses: actions/download-artifact@v2
        with:
          name: Packages
      
      - name: Set NuGet API Key
        run: nuget setapikey ${{ secrets.NUGET_API_KEY }}
        
      - name: Publish NuGet Packages
        run: nuget push *.nupkg -Source https://api.nuget.org/v3/index.json
    